<!DOCTYPE html>
<html>
   <head>
      <link rel="stylesheet" href="./horizn.css">
   </head>
   <body class="horizn" style="margin:0;">
      <input type="checkbox" id="horizn-article-open" checked="checked"><!-- 
      <div class="horizn-container">
         <div class='horizn-leadin'>
         </div>
         <div class='horizn-timeline'>
            <label for="horizn-article-open"><h3>2017.12.15</h3></label>
            <p>Unit Testing on MacOS /&nbsp;Windows</p>
            <label for="horizn-article-open"><h3>2017.04.09</h3></label>
            <p>Creating a dotnet core NuGet&nbsp;Package</p>
            <ol>
                                    <li>
               <a href="/getting-started-with-hashicorp-terraform">
                  <span class="circle ">&nbsp;</span>
                  <h3>Getting Started with Hashicorp Terraform</h3>
                  <p>
                     <time datetime="2020-01-04T00:00:00Z">2020.01.04</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="com">// variables.tf</span><span class="pln">
</span><span class="typ">Variable</span><span class="pln"> </span><span class="str">"ami"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"string"</span><span class="pln">
   description </span><span class="pun">=</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
   </span><span class="kwd">default</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ami-a1b2c3d4"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// main.tf</span><span class="pln">
provider </span><span class="str">"aws"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   region </span><span class="pun">=</span><span class="pln"> </span><span class="str">"us-east-1"</span><span class="pln">
   version </span><span class="pun">=</span><span class="pln"> </span><span class="str">"~&gt; 2.00"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
resource </span><span class="str">"asw_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   ami </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">var</span><span class="pun">.</span><span class="pln">ami
   instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t2.micro"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/docker-image-promotion-in-artifactory-with-azure-devops-yaml-pipelines">
                  <span class="circle ">&nbsp;</span>
                  <h3>Docker Image Promotion in Artifactory with Azure DevOps YAML Pipelines</h3>
                  <p>
                     <time datetime="2019-10-10T00:00:00Z">2019.10.10</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-yaml"><span class="pun">-</span><span class="pln"> task</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ArtifactoryDocker@1</span><span class="pln">
  inputs</span><span class="pun">:</span><span class="pln">
    command</span><span class="pun">:</span><span class="pln"> </span><span class="str">'pull'</span><span class="pln">
    imageName</span><span class="pun">:</span><span class="pln"> </span><span class="str">"repo/img:0da098bf"</span><span class="pln">
</span><span class="pun">-</span><span class="pln"> bash</span><span class="pun">:</span><span class="pln"> </span><span class="pun">|</span><span class="pln">
    docker tag </span><span class="str">"repo/img:0da098bf"</span><span class="pln"> \
               </span><span class="str">"repo/img-qa:0da098bf"</span><span class="pln">
</span><span class="pun">-</span><span class="pln"> task</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ArtifactoryDocker@1</span><span class="pln">
  inputs</span><span class="pun">:</span><span class="pln">
    command</span><span class="pun">:</span><span class="pln"> </span><span class="str">'push'</span><span class="pln">
    imageName</span><span class="pun">:</span><span class="pln"> </span><span class="str">"repo/img-qa:0da098bf"</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/delete-apple-time-machine-backups">
                  <span class="circle ">&nbsp;</span>
                  <h3>Delete Apple Time Machine Backups</h3>
                  <p>
                     <time datetime="2019-08-13T00:00:00Z">2019.08.13</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">tmutil listbackups \
  </span><span class="pun">|</span><span class="pln"> awk </span><span class="str">'{print substr($4,9,16)}'</span><span class="pln"> \
  </span><span class="pun">|</span><span class="pln"> xargs sudo tmutil delete \
    </span><span class="pun">/</span><span class="typ">Volumes</span><span class="pun">/</span><span class="typ">Time</span><span class="pln">\ </span><span class="typ">Machine</span><span class="pun">/.../</span><span class="typ">MyMac</span><span class="pun">/</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/containerizing-dotnet-core-console-app-in-alpine-linux-docker-image">
                  <span class="circle ">&nbsp;</span>
                  <h3>Containerizing a Dotnet Core MVC App in an Alpine Linux Docker Image  </h3>
                  <p>
                     <time datetime="2019-01-02T00:00:00Z">2019.01.02</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bash"><span class="pln">docker build \
  </span><span class="pun">--</span><span class="pln">tag alpine</span><span class="pun">-</span><span class="pln">mvc</span><span class="pun">-</span><span class="pln">img </span><span class="pun">.</span><span class="pln">
docker run \
  </span><span class="pun">--</span><span class="pln">name mvc</span><span class="pun">-</span><span class="pln">container \
  </span><span class="pun">--</span><span class="pln">publish </span><span class="lit">80</span><span class="pun">:</span><span class="lit">80</span><span class="pln"> \
  </span><span class="pun">--</span><span class="pln">detach \
  alpine</span><span class="pun">-</span><span class="pln">mvc</span><span class="pun">-</span><span class="pln">img</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/unit-testing-on-macos-windows">
                  <span class="circle ">&nbsp;</span>
                  <h3>JavaScript Unit Testing on MacOS/Windows</h3>
                  <p>
                     <time datetime="2018-11-11T00:00:00Z">2018.11.11</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="typ">TestSuite</span><span class="pun">.</span><span class="typ">AssertEqual</span><span class="pun">(</span><span class="pln">
   </span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">)</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/cloning-a-vsts-git-repo-with-ssh-on-macos">
                  <span class="circle ">&nbsp;</span>
                  <h3>Cloning an Azure DevOps Git Repo with SSH on&nbsp;MacOS</h3>
                  <p>
                     <time datetime="2018-07-04T00:00:00Z">2018.07.04</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bsh"><span class="pln">ssh</span><span class="pun">-</span><span class="pln">keygen </span><span class="pun">-</span><span class="pln">t rsa </span><span class="pun">/</span><span class="pln">
   </span><span class="pun">-</span><span class="pln">C </span><span class="str">"[your email]"</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="/connecting-to-a-local-microsoft-sql-server-on-macos-with-docker-and-dotnet-core">
                  <span class="circle ">&nbsp;</span>
                  <h3>Connecting to a Local Microsoft SQL Server on MacOS with Docker and Dotnet&nbsp;Core</h3>
                  <p>
                     <time datetime="2018-03-24T00:00:00Z">2018.03.24</time>
                  </p>
                  <p></p><p>I'm a developer that uses Microsoft technology, and I'm on a mission to never use the Windows OS again <em>(haha, ok. maybe not never again)</em>...</p><p></p>
               </a>
            </li>
            <li>
               <a href="/creating-a-dotnet-core-nuget-package">
                  <span class="circle ">&nbsp;</span>
                  <h3>Creating a Dotnet Core NuGet Package</h3>
                  <p>
                     <time datetime="2017-04-09T00:00:00Z">2017.04.09</time>
                  </p>
                  <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bsh"><span class="pln">dotnet nuget push </span><span class="pun">*.</span><span class="pln">nupkg </span><span class="pun">/</span><span class="pln">
   </span><span class="pun">--</span><span class="pln">api</span><span class="pun">-</span><span class="pln">key </span><span class="pun">[</span><span class="pln">guid</span><span class="pun">]</span><span class="pln"> </span><span class="pun">/</span><span class="pln">
   </span><span class="pun">--</span><span class="pln">source

dotnet add package </span><span class="pun">...</span></code></pre><p></p>
               </a>
            </li>
            <li>
               <a href="#">
                  <span class="circle circle-orange">&nbsp;</span>
               </a>
            </li>
         </ol>
         </div>
         <div class='horizn-sheet'>
            <p><label for="horizn-article-open">close</label></p>
            <div>
               <h1>
                  Getting Started with Hashicorp Terraform
               </h1>
               <div itemprop="description">
                  A brief overview of what terraform is, and how we can use it to define infrastructure as code.
               </div>
               <span>
                  <h3>
                     <span itemscope="" itemtype="http://schema.org/Person">
                        <a href="/" rel="author" itemprop="author">Rich Minchuk</a>
                     </span> -
                     <time datetime="2020-01-04T00:00:00Z" itemprop="datePublished">2020.01.04</time>
                  </h3>
               </span>
               <p>Hello again, my name is Rich Minchuk, and I'd like to describe some infrastructure as code. What exactly does that mean?</p><p>Well, it means a few things.</p><ul><li>It means that I'd like to know how the systems I'm working with were created.</li><li>It means that I'd like to know how to recreate the systems I'm working with.</li><li>It means that I'd like to know that I can redeploy exactly what was lost in the case of a disaster.</li><li>It means that I'd probably like to version control this code as well.</li></ul><p>I would like a singular place that I can look that describes the infrastructure I'm working with (say I'm deploying an application to this infrastructure), and know exactly how it was created. In specific cases where I might be unsure if my infrastructure matches the code that describes it, I should be able to easily destroy the infrastructure and know exactly how  to recreate it.</p><p>Terraform is an open source tool for defining infrastructure as code. You can use it to define on-prem and cloud infrastructure (IE: VMWare, AWS, Azure, GCP, Networking, etc..), as well as provision software using well known infrastructure automation frameworks (Helm, Chef, etc..).</p><p>When we "terraform infrastructure," we are using the defined-in-code infrastructure to inform how we "plan" it's deployment using the <code class="prettyprint prettyprinted" style=""><span class="pln">terraform plan</span></code> command, then apply the diff of changes using <code class="prettyprint prettyprinted" style=""><span class="pln">terraform apply</span></code>. To define our infrastructure as code we use Hashicorp Configuration Language and JSON, and here's what that looks like.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="com">// Hashicorp Configuration Language</span><span class="pln">
</span><span class="typ">Variable</span><span class="pln"> </span><span class="str">"ami"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"string"</span><span class="pln">
   description </span><span class="pun">=</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// Plain old JSON</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
   </span><span class="str">"Variable"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="str">"ami"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
         </span><span class="str">"description"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>In the example above, I'm creating a variable I can use later in my project to define which Amazon Machine Image I want to use, and you can see the syntactical differences between Hashicorp Configuration Language and JSON as well.</p><h3>Resources &amp; Other Components</h3><p>Resources are the primary component you'll work with after setting up a terraform repo. They define the infrastructure we wish to create, according to how the resource expects the infrastructure to be defined.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">resource </span><span class="str">"asw_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   ami </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ami-a1b2c3d4"</span><span class="pln">
   instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t2.micro"</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>In this example, we've specified that the "AWS Instance" called "web" is based on the Amazon Machine Image "AMI - a1 b2 c3 d4", and it's of the "instance type" "t2 micro". And for now, that's all we really need to define this <em>machine</em> in code.</p><p>A provider is a configuration block that <em>exposes</em> specific Resources.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">provider </span><span class="str">"aws"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   region </span><span class="pun">=</span><span class="pln"> </span><span class="str">"us-east-1"</span><span class="pln">
   version </span><span class="pun">=</span><span class="pln"> </span><span class="str">"~&gt; 2.00"</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>For example, if I wanted to create a virtual machine in AWS, I would use the AWS Provider to expose the "AWS Instance" resource (above).</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">module </span><span class="str">"my-module-that-does-things"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   source </span><span class="pun">=</span><span class="pln"> </span><span class="str">"./my-module-dir"</span><span class="pln">
   my</span><span class="pun">-</span><span class="pln">input</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>Modules are an abstraction layer for resources that are typically used together. They help you encapsulate complexity out of the way. From the root module (or your terraform git repository's top level folder) you can call any number of modules. So, instead of configuring a lengthy resource definition in your top level <code class="prettyprint prettyprinted" style=""><span class="pln">main</span><span class="pun">.</span><span class="pln">tf</span></code> file, abstract away it's inputs in a sub module.</p><p>Even better, there are hundreds of prebuilt modules from your to easily get started with, and they're accessible through the <a href="registry.terraform.io" target="_blank">Terraform Registry</a>. Each module in the Terraform Registry comes with examples of how to build these pieces of infrastructure inside your own terraform project.</p><p>As you saw above I included a custom variable called <code class="prettyprint prettyprinted" style=""><span class="kwd">my</span><span class="pun">-</span><span class="pln">input</span><span class="pun">-</span><span class="pln">variable</span></code> in the call to <code class="prettyprint prettyprinted" style=""><span class="kwd">my</span><span class="pun">-</span><span class="kwd">module</span><span class="pun">-</span><span class="pln">that</span><span class="pun">-</span><span class="pln">does</span><span class="pun">-</span><span class="pln">things</span></code>. Variables help you define the inputs that your project or module requires. When building infrastructure you may require environment specific configuration. Being able to substitute this information at planning and execution is a crucial component of multi-environment based infrastructure management.</p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">terraform plan </span><span class="pun">-</span><span class="pln">f my</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">-</span><span class="pln">file</span><span class="pun">.</span><span class="pln">tf
</span><span class="com"># or</span><span class="pln">
terraform plan </span><span class="pun">-</span><span class="pln">f my</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">-</span><span class="pln">file</span><span class="pun">.</span><span class="pln">tf</span><span class="pun">.</span><span class="pln">json</span></code></pre><p>We'd define this environment specific configuration in variable files, which are included when we terraform plan, or terraform apply the infrastructure.</p><p>Data sources are an interesting way to dynamically modify your terraform plan. For example, I might want to create an EC2 instance based on the latest Amazon Machine Image.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">data </span><span class="str">"aws_ami"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   filter </span><span class="pun">{</span><span class="pln">
      name </span><span class="pun">=</span><span class="pln"> </span><span class="str">"state"</span><span class="pln">
      values </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"available"</span><span class="pun">]</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   most_recent </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

resource </span><span class="str">"aws_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   ami </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">aws_ami</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">id
   instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t1.micro"</span><span class="pln">
   </span><span class="com">// ... continued below</span></code></pre><p>I can define an "AWS AMI" data source, then reference the ID of the machine image in my AWS Instance resource definition. When I terraform plan my project, It'll return whether or not there's a new Amazon Machine Image for me to use or not.</p><!-- 
## TEMPLATES

- Templates allow you to define your own data source which will deliver that dynamic data into your terraform plan.
- so where the AWS AMI data source got data from AWS, my Data Source Template can bring in data from a simple bash script.
--\><p>Provisioners are tools that allow us to perform custom actions on our infrastructure.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">   </span><span class="com">// ... continued from above</span><span class="pln">
   </span><span class="com">// copy version controlled configs to aws instance </span><span class="pln">
   provisioner </span><span class="str">"file"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      source </span><span class="pun">=</span><span class="pln"> </span><span class="str">"./conf/configs.d"</span><span class="pln">
      destination </span><span class="pun">=</span><span class="pln"> </span><span class="str">"/etc"</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
   </span><span class="com">// join to consul for service discovery </span><span class="pln">
   provisioner </span><span class="str">"remote-exec"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">inline</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">"consul join ${aws_instance.web.private_ip}"</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>We can copy files to remote servers or execute scripts there too. There's also support for common infrastructure automation frameworks like puppet and chef.</p><p>Terraform uses state files to understand the last known configuration of your infrastructure. This helps terraform understand what actions need to be taken when planning our infrastructure changes. We use the <code class="prettyprint prettyprinted" style=""><span class="pln">terraform plan</span></code> command to test that changes we made in code will have the effect we desire on our infrastructure.</p><p>In a multi user terraform-ing team (like a DevOps team), remote backends can be used to share the known state of our infrastructure. Some remote backends even support state locking, because we wouldn't want two people trying to apply changes at the same time.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">terraform </span><span class="pun">{</span><span class="pln">
  backend </span><span class="str">"artifactory"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    username </span><span class="pun">=</span><span class="pln"> </span><span class="str">"MyServiceAccount"</span><span class="pln">
    password </span><span class="pun">=</span><span class="pln"> $var</span><span class="pun">.</span><span class="pln">artifactory_pass
    url      </span><span class="pun">=</span><span class="pln"> </span><span class="str">"https://custom.artifactoryonline.com/artifactory"</span><span class="pln">
    repo     </span><span class="pun">=</span><span class="pln"> </span><span class="str">"foo"</span><span class="pln">
    subpath  </span><span class="pun">=</span><span class="pln"> </span><span class="str">"terraform-bar"</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>There's a slew of supported options for <a href="https://terraform.io/docs/backends/types" target="_blank">terraform backends</a> including (Artifactory, AzureRM, GCS, S3, and many more).</p><h3>Getting Started</h3><p>I'm sure you're wondering how to get started. Well that's a pretty difficult question to answer due to the wide breadth of infrastructure you can create with Terraform. My suggestion to you is that you start trying to define your existing infrastructure in code first. When you've done that you can rest assured you'll always be able to recreate it if there is a problem!</p><p>For a more litteral set of getting started steps, first create a new git repo, change directories to it, and run <code class="prettyprint prettyprinted" style=""><span class="pln">terraform init</span></code>. This is the first command you'll run when setting up a new terraform project. you'll probably want to create a <code class="prettyprint prettyprinted" style=""><span class="pun">.</span><span class="pln">gitignore</span></code> as well:</p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">echo </span><span class="pun">-</span><span class="pln">n </span><span class="str">"#  Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# .tfvars files
*.tfvars"</span><span class="pln"> </span><span class="pun">&gt;.</span><span class="pln">gitignore</span></code></pre><p>Good Luck, and be sure to click subscribe to see how I terraform my Azure Kubernetes Service next!</p>
            <div>
         </div>
      </div> -->

      <input type="checkbox" id="horizn-article-open">
      <header class="horizn">
         <h1>site name</h1>
      </header>
      <aside class="horizn">
         <label for="horizn-article-open"><h3>2017.12.15</h3></label>
         <p>Unit Testing on MacOS /&nbsp;Windows</p>
         <label for="horizn-article-open"><h3>2017.04.09</h3></label>
         <p>Creating a dotnet core NuGet&nbsp;Package</p>
         <ol>
                                 <li>
            <a href="/getting-started-with-hashicorp-terraform">
               <span class="circle ">&nbsp;</span>
               <h3>Getting Started with Hashicorp Terraform</h3>
               <p>
                  <time datetime="2020-01-04T00:00:00Z">2020.01.04</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="com">// variables.tf</span><span class="pln">
</span><span class="typ">Variable</span><span class="pln"> </span><span class="str">"ami"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"string"</span><span class="pln">
description </span><span class="pun">=</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
</span><span class="kwd">default</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ami-a1b2c3d4"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// main.tf</span><span class="pln">
provider </span><span class="str">"aws"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
region </span><span class="pun">=</span><span class="pln"> </span><span class="str">"us-east-1"</span><span class="pln">
version </span><span class="pun">=</span><span class="pln"> </span><span class="str">"~&gt; 2.00"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
resource </span><span class="str">"asw_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
ami </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">var</span><span class="pun">.</span><span class="pln">ami
instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t2.micro"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/docker-image-promotion-in-artifactory-with-azure-devops-yaml-pipelines">
               <span class="circle ">&nbsp;</span>
               <h3>Docker Image Promotion in Artifactory with Azure DevOps YAML Pipelines</h3>
               <p>
                  <time datetime="2019-10-10T00:00:00Z">2019.10.10</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-yaml"><span class="pun">-</span><span class="pln"> task</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ArtifactoryDocker@1</span><span class="pln">
inputs</span><span class="pun">:</span><span class="pln">
 command</span><span class="pun">:</span><span class="pln"> </span><span class="str">'pull'</span><span class="pln">
 imageName</span><span class="pun">:</span><span class="pln"> </span><span class="str">"repo/img:0da098bf"</span><span class="pln">
</span><span class="pun">-</span><span class="pln"> bash</span><span class="pun">:</span><span class="pln"> </span><span class="pun">|</span><span class="pln">
 docker tag </span><span class="str">"repo/img:0da098bf"</span><span class="pln"> \
            </span><span class="str">"repo/img-qa:0da098bf"</span><span class="pln">
</span><span class="pun">-</span><span class="pln"> task</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ArtifactoryDocker@1</span><span class="pln">
inputs</span><span class="pun">:</span><span class="pln">
 command</span><span class="pun">:</span><span class="pln"> </span><span class="str">'push'</span><span class="pln">
 imageName</span><span class="pun">:</span><span class="pln"> </span><span class="str">"repo/img-qa:0da098bf"</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/delete-apple-time-machine-backups">
               <span class="circle ">&nbsp;</span>
               <h3>Delete Apple Time Machine Backups</h3>
               <p>
                  <time datetime="2019-08-13T00:00:00Z">2019.08.13</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">tmutil listbackups \
</span><span class="pun">|</span><span class="pln"> awk </span><span class="str">'{print substr($4,9,16)}'</span><span class="pln"> \
</span><span class="pun">|</span><span class="pln"> xargs sudo tmutil delete \
 </span><span class="pun">/</span><span class="typ">Volumes</span><span class="pun">/</span><span class="typ">Time</span><span class="pln">\ </span><span class="typ">Machine</span><span class="pun">/.../</span><span class="typ">MyMac</span><span class="pun">/</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/containerizing-dotnet-core-console-app-in-alpine-linux-docker-image">
               <span class="circle ">&nbsp;</span>
               <h3>Containerizing a Dotnet Core MVC App in an Alpine Linux Docker Image  </h3>
               <p>
                  <time datetime="2019-01-02T00:00:00Z">2019.01.02</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bash"><span class="pln">docker build \
</span><span class="pun">--</span><span class="pln">tag alpine</span><span class="pun">-</span><span class="pln">mvc</span><span class="pun">-</span><span class="pln">img </span><span class="pun">.</span><span class="pln">
docker run \
</span><span class="pun">--</span><span class="pln">name mvc</span><span class="pun">-</span><span class="pln">container \
</span><span class="pun">--</span><span class="pln">publish </span><span class="lit">80</span><span class="pun">:</span><span class="lit">80</span><span class="pln"> \
</span><span class="pun">--</span><span class="pln">detach \
alpine</span><span class="pun">-</span><span class="pln">mvc</span><span class="pun">-</span><span class="pln">img</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/unit-testing-on-macos-windows">
               <span class="circle ">&nbsp;</span>
               <h3>JavaScript Unit Testing on MacOS/Windows</h3>
               <p>
                  <time datetime="2018-11-11T00:00:00Z">2018.11.11</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="typ">TestSuite</span><span class="pun">.</span><span class="typ">AssertEqual</span><span class="pun">(</span><span class="pln">
</span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">)</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/cloning-a-vsts-git-repo-with-ssh-on-macos">
               <span class="circle ">&nbsp;</span>
               <h3>Cloning an Azure DevOps Git Repo with SSH on&nbsp;MacOS</h3>
               <p>
                  <time datetime="2018-07-04T00:00:00Z">2018.07.04</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bsh"><span class="pln">ssh</span><span class="pun">-</span><span class="pln">keygen </span><span class="pun">-</span><span class="pln">t rsa </span><span class="pun">/</span><span class="pln">
</span><span class="pun">-</span><span class="pln">C </span><span class="str">"[your email]"</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="/connecting-to-a-local-microsoft-sql-server-on-macos-with-docker-and-dotnet-core">
               <span class="circle ">&nbsp;</span>
               <h3>Connecting to a Local Microsoft SQL Server on MacOS with Docker and Dotnet&nbsp;Core</h3>
               <p>
                  <time datetime="2018-03-24T00:00:00Z">2018.03.24</time>
               </p>
               <p></p><p>I'm a developer that uses Microsoft technology, and I'm on a mission to never use the Windows OS again <em>(haha, ok. maybe not never again)</em>...</p><p></p>
            </a>
         </li>
         <li>
            <a href="/creating-a-dotnet-core-nuget-package">
               <span class="circle ">&nbsp;</span>
               <h3>Creating a Dotnet Core NuGet Package</h3>
               <p>
                  <time datetime="2017-04-09T00:00:00Z">2017.04.09</time>
               </p>
               <p></p><pre class="prettyprint prettyprinted" style=""><code class="language-bsh"><span class="pln">dotnet nuget push </span><span class="pun">*.</span><span class="pln">nupkg </span><span class="pun">/</span><span class="pln">
</span><span class="pun">--</span><span class="pln">api</span><span class="pun">-</span><span class="pln">key </span><span class="pun">[</span><span class="pln">guid</span><span class="pun">]</span><span class="pln"> </span><span class="pun">/</span><span class="pln">
</span><span class="pun">--</span><span class="pln">source

dotnet add package </span><span class="pun">...</span></code></pre><p></p>
            </a>
         </li>
         <li>
            <a href="#">
               <span class="circle circle-orange">&nbsp;</span>
            </a>
         </li>
         </ol>
      </aside>
      <article class="horizn">
         <div>
            <h1>
               Getting Started with Hashicorp Terraform
            </h1>
            <div itemprop="description">
               A brief overview of what terraform is, and how we can use it to define infrastructure as code.
            </div>
            <span>
               <h3>
                  <span itemscope="" itemtype="http://schema.org/Person">
                     <a href="/" rel="author" itemprop="author">Rich Minchuk</a>
                  </span> -
                  <time datetime="2020-01-04T00:00:00Z" itemprop="datePublished">2020.01.04</time>
               </h3>
            </span>
            <p>Hello again, my name is Rich Minchuk, and I'd like to describe some infrastructure as code. What exactly does that mean?</p><p>Well, it means a few things.</p><ul><li>It means that I'd like to know how the systems I'm working with were created.</li><li>It means that I'd like to know how to recreate the systems I'm working with.</li><li>It means that I'd like to know that I can redeploy exactly what was lost in the case of a disaster.</li><li>It means that I'd probably like to version control this code as well.</li></ul><p>I would like a singular place that I can look that describes the infrastructure I'm working with (say I'm deploying an application to this infrastructure), and know exactly how it was created. In specific cases where I might be unsure if my infrastructure matches the code that describes it, I should be able to easily destroy the infrastructure and know exactly how  to recreate it.</p><p>Terraform is an open source tool for defining infrastructure as code. You can use it to define on-prem and cloud infrastructure (IE: VMWare, AWS, Azure, GCP, Networking, etc..), as well as provision software using well known infrastructure automation frameworks (Helm, Chef, etc..).</p><p>When we "terraform infrastructure," we are using the defined-in-code infrastructure to inform how we "plan" it's deployment using the <code class="prettyprint prettyprinted" style=""><span class="pln">terraform plan</span></code> command, then apply the diff of changes using <code class="prettyprint prettyprinted" style=""><span class="pln">terraform apply</span></code>. To define our infrastructure as code we use Hashicorp Configuration Language and JSON, and here's what that looks like.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="com">// Hashicorp Configuration Language</span><span class="pln">
</span><span class="typ">Variable</span><span class="pln"> </span><span class="str">"ami"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"string"</span><span class="pln">
description </span><span class="pun">=</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// Plain old JSON</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
</span><span class="str">"Variable"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="str">"ami"</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="str">"description"</span><span class="pun">:</span><span class="pln"> </span><span class="str">"the ami to use"</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>In the example above, I'm creating a variable I can use later in my project to define which Amazon Machine Image I want to use, and you can see the syntactical differences between Hashicorp Configuration Language and JSON as well.</p><h3>Resources &amp; Other Components</h3><p>Resources are the primary component you'll work with after setting up a terraform repo. They define the infrastructure we wish to create, according to how the resource expects the infrastructure to be defined.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">resource </span><span class="str">"asw_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
ami </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ami-a1b2c3d4"</span><span class="pln">
instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t2.micro"</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>In this example, we've specified that the "AWS Instance" called "web" is based on the Amazon Machine Image "AMI - a1 b2 c3 d4", and it's of the "instance type" "t2 micro". And for now, that's all we really need to define this <em>machine</em> in code.</p><p>A provider is a configuration block that <em>exposes</em> specific Resources.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">provider </span><span class="str">"aws"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
region </span><span class="pun">=</span><span class="pln"> </span><span class="str">"us-east-1"</span><span class="pln">
version </span><span class="pun">=</span><span class="pln"> </span><span class="str">"~&gt; 2.00"</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>For example, if I wanted to create a virtual machine in AWS, I would use the AWS Provider to expose the "AWS Instance" resource (above).</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">module </span><span class="str">"my-module-that-does-things"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
source </span><span class="pun">=</span><span class="pln"> </span><span class="str">"./my-module-dir"</span><span class="pln">
my</span><span class="pun">-</span><span class="pln">input</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">:</span><span class="pln"> </span><span class="lit">5</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>Modules are an abstraction layer for resources that are typically used together. They help you encapsulate complexity out of the way. From the root module (or your terraform git repository's top level folder) you can call any number of modules. So, instead of configuring a lengthy resource definition in your top level <code class="prettyprint prettyprinted" style=""><span class="pln">main</span><span class="pun">.</span><span class="pln">tf</span></code> file, abstract away it's inputs in a sub module.</p><p>Even better, there are hundreds of prebuilt modules from your to easily get started with, and they're accessible through the <a href="registry.terraform.io" target="_blank">Terraform Registry</a>. Each module in the Terraform Registry comes with examples of how to build these pieces of infrastructure inside your own terraform project.</p><p>As you saw above I included a custom variable called <code class="prettyprint prettyprinted" style=""><span class="kwd">my</span><span class="pun">-</span><span class="pln">input</span><span class="pun">-</span><span class="pln">variable</span></code> in the call to <code class="prettyprint prettyprinted" style=""><span class="kwd">my</span><span class="pun">-</span><span class="kwd">module</span><span class="pun">-</span><span class="pln">that</span><span class="pun">-</span><span class="pln">does</span><span class="pun">-</span><span class="pln">things</span></code>. Variables help you define the inputs that your project or module requires. When building infrastructure you may require environment specific configuration. Being able to substitute this information at planning and execution is a crucial component of multi-environment based infrastructure management.</p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">terraform plan </span><span class="pun">-</span><span class="pln">f my</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">-</span><span class="pln">file</span><span class="pun">.</span><span class="pln">tf
</span><span class="com"># or</span><span class="pln">
terraform plan </span><span class="pun">-</span><span class="pln">f my</span><span class="pun">-</span><span class="pln">variable</span><span class="pun">-</span><span class="pln">file</span><span class="pun">.</span><span class="pln">tf</span><span class="pun">.</span><span class="pln">json</span></code></pre><p>We'd define this environment specific configuration in variable files, which are included when we terraform plan, or terraform apply the infrastructure.</p><p>Data sources are an interesting way to dynamically modify your terraform plan. For example, I might want to create an EC2 instance based on the latest Amazon Machine Image.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">data </span><span class="str">"aws_ami"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
filter </span><span class="pun">{</span><span class="pln">
   name </span><span class="pun">=</span><span class="pln"> </span><span class="str">"state"</span><span class="pln">
   values </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">"available"</span><span class="pun">]</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
most_recent </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

resource </span><span class="str">"aws_instance"</span><span class="pln"> </span><span class="str">"web"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
ami </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">aws_ami</span><span class="pun">.</span><span class="pln">web</span><span class="pun">.</span><span class="pln">id
instance_type </span><span class="pun">=</span><span class="pln"> </span><span class="str">"t1.micro"</span><span class="pln">
</span><span class="com">// ... continued below</span></code></pre><p>I can define an "AWS AMI" data source, then reference the ID of the machine image in my AWS Instance resource definition. When I terraform plan my project, It'll return whether or not there's a new Amazon Machine Image for me to use or not.</p><!-- 
## TEMPLATES

- Templates allow you to define your own data source which will deliver that dynamic data into your terraform plan.
- so where the AWS AMI data source got data from AWS, my Data Source Template can bring in data from a simple bash script.
--><p>Provisioners are tools that allow us to perform custom actions on our infrastructure.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">   </span><span class="com">// ... continued from above</span><span class="pln">
</span><span class="com">// copy version controlled configs to aws instance </span><span class="pln">
provisioner </span><span class="str">"file"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   source </span><span class="pun">=</span><span class="pln"> </span><span class="str">"./conf/configs.d"</span><span class="pln">
   destination </span><span class="pun">=</span><span class="pln"> </span><span class="str">"/etc"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="com">// join to consul for service discovery </span><span class="pln">
provisioner </span><span class="str">"remote-exec"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">inline</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">"consul join ${aws_instance.web.private_ip}"</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>We can copy files to remote servers or execute scripts there too. There's also support for common infrastructure automation frameworks like puppet and chef.</p><p>Terraform uses state files to understand the last known configuration of your infrastructure. This helps terraform understand what actions need to be taken when planning our infrastructure changes. We use the <code class="prettyprint prettyprinted" style=""><span class="pln">terraform plan</span></code> command to test that changes we made in code will have the effect we desire on our infrastructure.</p><p>In a multi user terraform-ing team (like a DevOps team), remote backends can be used to share the known state of our infrastructure. Some remote backends even support state locking, because we wouldn't want two people trying to apply changes at the same time.</p><pre class="prettyprint prettyprinted" style=""><code class="language-js"><span class="pln">terraform </span><span class="pun">{</span><span class="pln">
backend </span><span class="str">"artifactory"</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
 username </span><span class="pun">=</span><span class="pln"> </span><span class="str">"MyServiceAccount"</span><span class="pln">
 password </span><span class="pun">=</span><span class="pln"> $var</span><span class="pun">.</span><span class="pln">artifactory_pass
 url      </span><span class="pun">=</span><span class="pln"> </span><span class="str">"https://custom.artifactoryonline.com/artifactory"</span><span class="pln">
 repo     </span><span class="pun">=</span><span class="pln"> </span><span class="str">"foo"</span><span class="pln">
 subpath  </span><span class="pun">=</span><span class="pln"> </span><span class="str">"terraform-bar"</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre><p>There's a slew of supported options for <a href="https://terraform.io/docs/backends/types" target="_blank">terraform backends</a> including (Artifactory, AzureRM, GCS, S3, and many more).</p><h3>Getting Started</h3><p>I'm sure you're wondering how to get started. Well that's a pretty difficult question to answer due to the wide breadth of infrastructure you can create with Terraform. My suggestion to you is that you start trying to define your existing infrastructure in code first. When you've done that you can rest assured you'll always be able to recreate it if there is a problem!</p><p>For a more litteral set of getting started steps, first create a new git repo, change directories to it, and run <code class="prettyprint prettyprinted" style=""><span class="pln">terraform init</span></code>. This is the first command you'll run when setting up a new terraform project. you'll probably want to create a <code class="prettyprint prettyprinted" style=""><span class="pun">.</span><span class="pln">gitignore</span></code> as well:</p><pre class="prettyprint prettyprinted" style=""><code class="language-sh"><span class="pln">echo </span><span class="pun">-</span><span class="pln">n </span><span class="str">"#  Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# .tfvars files
*.tfvars"</span><span class="pln"> </span><span class="pun">&gt;.</span><span class="pln">gitignore</span></code></pre><p>Good Luck, and be sure to click subscribe to see how I terraform my Azure Kubernetes Service next!</p>
         <div></div></div>
      </article>
   </body>
</html>